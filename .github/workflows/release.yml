name: computorrelease
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  computorticle:
    name: Build and Release a Computo article with Rmarkdown
    runs-on: "ubuntu-latest"
    steps:
      - name: Checking out repository for Github action
        uses: actions/checkout@v2
      - name: Installing additional system libraries with APT if any
        run: xargs -a config/apt.txt sudo apt-get install
      - name: Setting up miniconda with specified Python and R dependencies
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          environment-file: config/environment.yml
          activate-environment: computorbuild
      - name: Installing pandoc for R
        uses: r-lib/actions/setup-pandoc@v1 # setup miniconda instal pandoc and pandoc-citeproc
        with:
          pandoc-version: '2.7.3' # The pandoc version to download (if necessary) and use.
      - name: Install additional R dependencies
        shell: bash -l {0}
        run: | 
          export LANG=en_US.UTF-8
          conda run -n computorbuild Rscript config/install.R
      - name: Rendering Rmd file to HTML and PDF
        shell: bash -l {0}
        run: | 
          export LANG=en_US.UTF-8
          conda run -n computorbuild Rscript -e 'rmarkdown::render(list.files(".", pattern = "*.Rmd"), output_dir = "output")'
          conda run -n computorbuild Rscript -e 'pagedown::chrome_print(paste0("output/",strsplit(list.files(".", pattern = "*.Rmd"), ".Rmd")[[1]], ".html"))'
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Prepare a file zip for releasing # zip the output
        run: |
          zip -r --junk-paths built_article output
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./built_article.zip
          asset_name: built_article.zip
          asset_content_type: application/zip
